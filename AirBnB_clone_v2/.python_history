class BaseModel:
a = 20;
class BaseModel:
 a = 20
b = 5
class BaseModel:
 a = 20
 b = 5
 def __init__(self, id):
  self.id = a+5
BaseModel.__dict__
class Base:
  def __init__(self, data):
    self.data = data
  def to_dict(self):
    return self.__dict__
newbie = Base()
newbie = Base("Example")
newbie2 = newbie.to_dict
print(newbie2)
newbie2 = newbie.to_dict()
print(newbie2)
bad_egg = Base("Not good")
bad_egg.no_way = "LOla!"
print(bad_egg.to_dict())
bad_egg.see_me = "I am now Three!"
print(bad_egg.to_dict())
class Base:
  def __init__(self, name="No name"):
    self.name = name
  def to_dict(self):
    return self.__dict__
newguy = Base()
newguy2 = Base("John Kennedy")
newguy2.age = 25
newguy2.height = 250
print(newguy.to_dict())
print(newguy2.to_dict())
import json
dictionary {'detail':{'name':"Chidubem", 'age': 27, 'Fvourite_movies': ("Black Panther", "Robot_2010"), 'marital_status': True, 'kids': None}}
dictionary = {'detail':{'name':"Chidubem", 'age': 27, 'Fvourite_movies': ("Black Panther", "Robot_2010"), 'marital_status': True, 'kids': None}}
dictionary
dictionary = {'detail':{'name':"Chidubem", 'age': 27, 'Fvourite_movies': ("Black Panther", "Robot_2010"), 'marital_status': True, 'kids': None}}
import json
class abc:
  __name = {}
  print(type(self.__name))
class abc:
 obj={}
 print(type(obj))
john = "john"
type(john)
def save():
 return "Hello"
type(save())
def save():
 price = 500
 price = int(price)
type(save())
def save():
 price = 500
 price = int(price)
 word = "I love it"
 age=None
type(save)
type(save())
class Mine:
 pass
type(Mine)
print(type(Mine))
class Mine:
 def __init__(self):
 pass
class Mine:
 def __init__(self):
  pass
def name(self, arg):
class Mine:
 def __init__(self):
  pass
def names(self, arg=0):
class Mine:
 def __init__(self):
  pass
 def names(self, name=None):
  print(name)
type(Mine)
jay = Mine()
type(jay)
type(Mine())
import MySQLdb
mysql
import mysqlbd
import MySQLdb
MySQLdb.__version__
import sqlalchemy
Engine = create_engine("sqlite:///tutorial.db")
from sqlalchemy import create_engine
Engine = create_engine("sqlite:///tutorial.db")
curs = Engine.cursor()
curs = Engine.cursors()
items = Engine.execute("CREATE IF NOT EXIST student ("name VARCHAR(30) NOT NULL, class VARCHAR(20), id INTEGER PRIMARY_KEY AUTO_INCREMENT))
items = Engine.execute("CREATE IF NOT EXIST student ("name VARCHAR(30) NOT NULL, class VARCHAR(20), id INTEGER PRIMARY_KEY AUTO_INCREMENT)
items = Engine.execute("CREATE IF NOT EXIST student ("name VARCHAR(30) NOT NULL, class VARCHAR(20), id INTEGER PRIMARY_KEY)
items = Engine.execute("CREATE IF NOT EXIST student ("name VARCHAR(30) NOT NULL, class VARCHAR(20), id INTEGER PRIMARY_KEY AUTO_INCREMENT);
items = Engine.execute("CREATE IF NOT EXIST student ("name VARCHAR(30) NOT NULL, class VARCHAR(20), id INTEGER PRIMARY KEY AUTOINCREMENT))
items = Engine.execute("CREATE TABLE IF NOT EXISTS student (name VARCHAR(30) NOT NULL, class VARCHAR(20), id INTEGER PRIMARY KEY AUTOINCREMENT)")
Engine = create_engine("sqlite:///tutorial.db")
items = Engine.execute("CREATE TABLE IF NOT EXISTS student (name VARCHAR(30) NOT NULL, class VARCHAR(20), id INTEGER PRIMARY KEY AUTOINCREMENT)")
conn = Engine.connect()
items = conn.execute("CREATE TABLE IF NOT EXISTS student (name VARCHAR(30) NOT NULL, class VARCHAR(20), id INTEGER PRIMARY KEY AUTOINCREMENT)")
The error you encountered is because you are trying to execute the SQL query directly on the Engine object instead of creating a Connection object first. The Engine object in SQLAlchemy does not have an execute method directly.
To execute SQL queries using SQLAlchemy, you need to establish a connection using the create_engine function and then create a Connection object. You can use the execute method of the Connection object to execute the SQL query.
Here's an updated version of the code:
python
Copy code
from sqlalchemy import create_engine
# Create an engine
engine = create_engine("sqlite:///tutorial.db")
# Establish a connection
connection = engine.connect()
# Execute the SQL query
query = "CREATE TABLE IF NOT EXISTS student (name VARCHAR(30) NOT NULL, class VARCHAR(20), id INTEGER PRIMARY KEY AUTOINCREMENT)"
result = connection.execute(query)
connection.close()
clear
Engine.close()
clear
clear()
cls
Engine = create_engine("sqlite:///student")
connection = Engine.connect()
query = "INSERT INTO employee (id, emp_name) VALUES("NULL", "John Mark")
query = "INSERT INTO employee (id, emp_name) VALUES("NULL", "John Mark")"
query = "INSERT INTO employee (id, emp_name) VALUES("none", "John Mark")"
query = "INSERT INTO employee (emp_name) VALUES("John Mark")"
query = "INSERT INTO employee (emp_name) VALUES ("John Mark")"
query = "INSERT INTO employee (id, emp_name) VALUES('NULL', 'John Mark')"
connection
Engine
connection.execute(query)
selectquery = "SELECT * FROM employee"
import sqlite
import sqlalchemy
from sqlalchemy import create_engine
engine = create_engine('sqlite:///school.db')
connection = engine.connect()
newtable = Table ('name' = COLOUM((STRING(50) nullable=False), 'id' = COLOUM(INTEGER, PRIMARY_KEY, nullable=False))
from sqlalchemy import INTEGER, STRING, COLUMN
newtable = Table ('name' = COLUMN((STRING(50) nullable=False), 'id' = COLUMN(INTEGER, PRIMARY_KEY, nullable=False))
from sqlalchemy import Integer, String
from sqlalchemy import Enum, Column
newtable = Table ('name' = COLUMN((STRING(50) nullable=False), 'id' = COLUMN(INTEGER, PRIMARY_KEY, nullable=False))
from sqlalchemy import Table, MetaData
metadata = MetaData()
newtable = Table ('name' = C((STRING(50) nullable=False), 'id' = COLUMN(INTEGER, PRIMARY_KEY, nullable=False))
newTable = Table ('newtable', metadata, COLUMN('id', INTEGER, PRIMARY_KWYEY, nullable=False, AUTO_INCREMENT), COLUMN('name', String(50)))
newTable = Table ('newtable', metadata, COLUMN('id', INTEGER, PRIMARY_KEY=True, nullable=False, AUTO_INCREMENT), COLUMN('name', String(50)))
newTable = Table ('newtable', metadata, COLUMN('id', INTEGER, PRIMARY_KEY=True, nullable=False, AUTO_INCREMENT=True), COLUMN('name', String(50)))
newTable = Table ('newtable', metadata, Column('id', Integer, primary_key=True, nullable=False, autoincrement=True), Column('name', String(50)))
input = "name = 'Frank Steve', name = 'John Fred', name = 'Chime Kingsley'"
connection.execute("INSERT INTO newTable VALUES(%s), input")
connection.execute("INSERT INTO newTable (name) VALUES {input}")
connection.execute("INSERT INTO newTable (name) VALUES ${input}")
query = "INSERT INTO newTable (name) VALUES {input}"
connection.execute(query)
input = "name = 'Frank Steve', name = 'John Fred', name = 'Chime Kingsley'"
query = f"INSERT INTO newTable (name) VALUES {input}"
connection.execute(query)
query = "INSERT INTO newTable (name) VALUES {input}"
input
inputs = list(input) 
inputs
rm inputs
del inputs
input = ['John Wick', 'Dwayne Johnson', 'Chime Kingsley', 'Obama Barracks']
query
for name in input:
	inserts = connection.execute(querys)
query = 'INSERT INTO newTable (name) VALUES value'
for value in input:
	inserts = connection.execute(query)
for value in input:
query = 'INSERT INTO newTable (name) VALUES {value}'
for value in input:
	inserts = connection.execute(query)
input = ["Frank Steve", "John Fred", "Chime Kingsley"]
query = 'INSERT INTO newTable (name) VALUES (:value)'
for value in input:
    connection.execute(query, value=value)
for value in input:
    connection.execute(query, value)
for value in input:
    connection.execute(query, {"value": value})
connection.execute("INSERT INTO newTable (name) VALUE ('John Willis'))
connection.execute("INSERT INTO newTable (name) VALUE ('John Willis')")
connection.execute("INSERT INTO newTable (name) VALUES ('John Willis')")
connection.execute("Insert into newTable (name) values ('John Willis')")
connection
engine
connection = engine.connect()
connection.execute("INSERT INTO newTable (name) VALUES ('John Willis')")
import sqlalchemy
from sqlalchemy import engine
from sqlalchemy import Column, Table, primary_key, MetaData, Integer, String, Enum
from sqlalchemy import Column, Table, primarykey, MetaData, Integer, String, Enum
from sqlalchemy import Column, Table, primary-key, MetaData, Integer, String, Enum
from sqlalchemy import Column, Table, MetaData, Integer, String, Enum
clear()
clear
clearscreen
 print("\033c", end='')
print("\033c", end='')
print("\033c")
conn = engine.connect()
conn = engine.connection()
engine
from sqlalchemy import create_engine
engine = create_engine('sqlite:///newengine.db')
connection = engine.connect()
metadata = MetaData()
from sqlalchemy import Integer, String, Primary_key
from sqlalchemy import Integer, String, Enum, Column, Table
first_table = Table ('student', 'metadata', Column('id', Integer, primary_key, nullable=False, autoincrement), Column('name', String(50)), Column('age', Integer), Column('Sex', Enum('M','F')))
first_table = Table ('student', 'metadata', Column('id', Integer, nullable=False, autoincrement), Column('name', String(50)), Column('age', Integer), Column('Sex', Enum('M','F')))
first_table = Table ('student', 'metadata', Column('id', Integer, nullable=False, autoincrement=True), Column('name', String(50)), Column('age', Integer), Column('Sex', Enum('M','F')))
first_table = Table ('student', metadata, Column('id', Integer, nullable=False, autoincrement=True), Column('name', String(50)), Column('age', Integer), Column('Sex', Enum('M','F')))
def cls():
	print("\033c", end="")
cls
cls()
cls = cls()
first_table
first_table.name
first_table.name.table
first_table.c.name
first_table.c.name.table
cls
cls()
def cls():
	print("\033c", end="")
clear = cls()
second_table = Table ('staff', metadata, Column('id', Integer), Column('name', String), Column('Subject', String(30)), Column('Gender, Enum('M', 'F')))
second_table = Table ('staff', metadata, Column('id', Integer), Column('name', String), Column('Subject', String(30)), Column('Gender, Enum('M','F')))
second_table = Table ('staff', metadata, Column('id', Integer), Column('name', String), Column('Subject', String(30)), Column('Gender', Enum('M', 'F')))
query = "INSERT INTO student(name, age, Sex) VALUES(:value) (('John Willis', 20, 'M'),('Jessy Jones', 18, 'F'),('Alfred Tuva', 32, 'M'))"
connection.execute(query)
query = "INSERT INTO student(name, age, Sex) VALUES(:name, :age, :Sex) [('John Willis', 20, 'M'),('Jessy Jones', 18, 'F'),('Alfred Tuva', 32, 'M')]"
connection.execute(query)
query = "INSERT INTO student(name, age, Sex) VALUES(:name, :age, :Sex)"
values =  [('John Willis', 20, 'M'),('Jessy Jones', 18, 'F'),('Alfred Tuva', 32, 'M')]
connection.execute(query, values)
connection.executemany(query, values)
query = "INSERT INTO student (name, age, Sex) VALUES (:name, :age, :Sex)"
values = [
    {'name': 'John Willis', 'age': 20, 'Sex': 'M'},
    {'name': 'Jessy Jones', 'age': 18, 'Sex': 'F'},
    {'name': 'Alfred Tuva', 'age': 32, 'Sex': 'M'}
]
connection.execute(query, values)
connection
query = "INSERT INTO student (name, age, Sex) VALUES ('John Henry', 20, 'M')"
connection.execute(query)
connection.execute(insert into student (name, age, Sex) values ('JOhn willis', 20, 'M'))
connection.execute("INSERT INTO student (name, age, Sex) VALUES ('John Willis', 20, 'M')")
connection = engine.connect()
connection.execute("INSERT INTO student (name, age, Sex) VALUES ('John Willis', 20, 'M')")
cls()
first_table
first_table.create(engine)
second_table.create(engine)
connection.execute("INSERT INTO student (name, age, Sex) VALUES ('John Willis', 20, 'M')")
metadata.create_all(engine)
print(metadata.create_all(engine))
cls()
print("\033c")
import sqlalchemy
from sqlalchemy.ext.declarative_base import declarative_base
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import create_engine
engine = create_engine()
engine = create_engine('sqlite:///dbase.db')
Base = declarative_base()
from sqlalchemy.orm import declarative_base
Base = declarative_base()
class User(Base):
	__tablename__ = 'user'
	id = Column(Integer, primary_key=True)
	name = Column(String)
	age = Column(Integer, nullable=True)
	def __repr__(self):
		return "User: %s Id: %s Age: %s" %(self.name, self.id, self.age)
from sqlalchemy import Column, Integer, String
class User(Base):
	__tablename__ = 'user'
	id = Column(Integer, primary_key=True)
	name = Column(String)
	age = Column(Integer, nullable=True)
	def __repr__(self):
		return "User: %s Id: %s Age: %s" %(self.name, self.id, self.age)
user1 = User(name='John Ephraim', age=20)
user1
user1.id = 1
user1
Base.metadata.create_all(engine)
metadata
metadata()
MetaData()
from sqlalchemy.orm import Session
session = Session(engine)
session = Session(bind=engine)
session.add(user1)
session.add_all([User(name='Myles Munroe', age=55, id=2), User(id=3, name='David Oyedepo', age=65), User(20, 'Simi Edward', 35])
session.add_all([User(name='Myles Munroe', age=55, id=2), User(id=3, name='David Oyedepo', age=65), User(20, 'Simi Edward', 35]))
session.add_all([User(name='Myles Munroe', age=55, id=2), User(id=3, name='David Oyedepo', age=65), User(20, 'Simi Edward', 35)])
session.add_all([User(name='Myles Munroe', age=55, id=2), User(id=3, name='David Oyedepo', age=65), User(id=4, name='Simi Edward', age=35)])
session.commit()
session.new
session.flush()
User
select = select() FROM User
select = select() from User
select = select()
from sqlalchemy.orm import select
from sqlalchemy import select
select = select()
session.connection().execute(select).fetchall()
connection = engine.connect()
session.connection().execute(select).fetchall()
select = select(User)
select = select(User.name, User.age)
sel = select([User.name, User.age])
clear()
def cls():
	print('\033c')
clear = cls()
query = session.Query(User)
query = session.query(User)
query.all()
import MySQLdb
MySQLdb.version_info
import sqlalchemy
sqlalchemy.__version__
clear = print("\033c")
import sqlalchemy
from sqlalchemy import create_engine, sessionmaker
from sqlalchemy.orm import sessionmaker
from sqlalchemy.orm import declarative_base
from sqlalchemy.orm import Integer, String, Column
from sqlalchemy import Integer, String, Column
engine = create_engine("sqlite:///mydb.db")
session = sessionmaker(bind=engine)
Session = session()
Base = declarative_base()
class CrudTest:
	__tablename__ = 'crudeTest'
	id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
	name = Column(String(100), nullable=False)
	nickname = Column(String(50))
	def __str__(self):
		return "{User_Id: %s, Name: %s, Nickname: %s" %(self.id, self.name, self.nickname)
user1 = CrudTest(name='James Philip', nickname='Opanka')
class CrudTest(Base):
	__tablename__ = 'crudeTest'
	id = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
	name = Column(String(100), nullable=False)
	nickname = Column(String(50))
	def __str__(self):
		return "{User_Id: %s, Name: %s, Nickname: %s" %(self.id, self.name, self.nickname)
user1 = CrudTest(name='James Philip', nickname='Opanka')
user2 = CrudeTest (name='Alfred Tuva', nickname='Joe Myn')
user2 = CrudTest (name='Alfred Tuva', nickname='Joe Myn')
user1 = CrudTest(name='James Philip', nickname='Opanka')
user3 = CrudTest(name='James Philip', nickname='Opanka')
Session.new
session.add_all()
Session.add_all()
Session.add_all(engine)
Session.add()
Session.add_all(user1, user2, user3)
Session.add(user1)
Session.add(user2)
Session.add(user3)
Session.query('crudeTest')
Session.query('crudTest')
Base.metadata.create_all(engine)
Session.query('crudTest')
session.commit()
Session.commit()
Session.flush()
Session.query('crudTest')
Session.query('crudeTest')
Session.query('crudeTest').all()
Session.query('crudTest').all()
Session.query("crudTest").all()
Session.query(crudTest).all()
Query = Session.query(crudeTest).filter()
Query = Session.query(crudTest).all()
Query = Session.query(CrudTest).all()
clear
clear()
Query
for row in Query:
	print(row)
update = Session.query(CrudTest).filter(nickname == "Opanka").all()
update = Session.query(CrudTest).filter(CrudTest.nickname == "Opanka").all()
update.nickname == 'Swagger'
update.nickname = 'Swagger'
update.nickname='Swagger'
update = Session.query(CrudTest).filter(CrudTest.nickname == "Opanka").first()
update.nickname='Swagger'
update.nickname = 'Swagger'
for row in Query:
	print(row)
		return "{User_Id: %s, Name: %s, Nickname: %s}" %(self.id, self.name, self.nickname)
Session.commit()
Query = Session.query(crudeTest).first()
Query = Session.query(CrudTest).first()
Query = Session.query(CrudTest).filter(id==1)
Session.delete(Query)
Session.delete(Query del)
Session.delete(Query del())
Query = Session.query(CrudTest).filter(id==1).first()
Session.delete(Query)
session.delete(Query)
if (Query):
	Session.delete(Query)
	print("Query deleted")
else:
	print("No record found to delete")
check = if (Query):
def check():
	if (Query):
		Session.delete(Query)
		print("Query deleted")
	else:
		print("No record found to delete")
Query = Session.query(CrudTest).filter(id=1).first()
Query = Session.query(CrudTest).filter_by(id=1).first()
check
check()
Session.commit()
newquery = Session.query(CrudTest)
for row in newquery:
	print(row)
import MySQLdb
 MySQLdb.version_info
MySQLdb.version_info
import MySQLdb
MySQLdb.version_info
import sqlalchemy
sqlalchemy --version
sqlalchemy.__version__
import sqlalchemy
from sqlalchemy import engine
from sqlalchemy import create_engine
from sqlalchemy import Integer, String, create_engine, Column
from sqlalchemy.ext.declaratives import declarative_base
from sqlalchemy.ext.declarative import declarative_base
Base = declarative_base()
class A(Base):
	__tablename__ = 'user'
	id  = Column(Integer, autoincrement=True, unique)
	name = Column(String, nullable=False)
def sort(lists):
	sorted = sorted(lists)
	return sorted[len(sorted)-1]
print(sort([4, 2, 1, 2, 3, 1]))
def sort(lists):
	sortit = sorted(lists)
	return sortit[len(sorted)-1]
print(sort([4, 2, 1, 2, 3, 1]))
def sort(lists):
	sortit = sorted(lists)
	return sortit[len(sortit)-1]
print(sort([4, 2, 1, 2, 3, 1]))
import urllib
import urllib.parser
import urllib.parse
print("\033c")
url = http://engentech.tech
url = 'http://engentech.tech'
data = urllib.parse.urlencode(values={'name': 'John', 'age':20})
data = urllib.parse.urlencode((values={'name': 'John', 'age':20}))
values={'name': 'John', 'age':20}
data = urllib.parse.urlencode(values)
data
data.encode('ascii')
data
data = data.encode("ascii")
with urllib.request.urlopen(url, data) as link:
	result = link.read()
with urllib.request.Request(url, data) as link:
	result = link.read()
request = urllib.request.Request(url, data)
with urllib.request.urlopen(request) as response:
	result = response.read()
def c():
	print("\033c", sep="")
c
c()
req1 = ulrllib.request.Request("http://example.com")
req1 = urlllib.request.Request("http://example.com")
req1 = urllib.request.Request("http://example.com")
req2 = urllib.request.urlopen("http://example.com")
req3 = urllib.request.urlopen(req1)
req1
print(req1)
req2
req3
req1.read()
req2.read()
req3.read()
c()
import requests
r = requests.get('https://api.github.com/user', auth=('Chimekinglsey', 'Holyspirit17!'))
cat c
cat c()
ls
r = requests.get('https://api.github.com/user', auth=('user', 'pass'))
c()
r = requests.get('http://example.com')
r.encoding
r.status_code
r.user
r.text
c()
r.headers
urlget = urllib.request.urlopen("http://example.com")
urlget.info()
print(urlget.info())
r.json()
r.json
print(r.json)
print(r.json())
c()
print(r.json())
exit
exit()
import urllib
if __name__ == "__main__":
    req = urllib.request.Request("https://alx-intranet.hbtn.io/status")
    with urllib.request.urlopen(req) as resp:
        result = resp.read()
import urllib.request
import urllib
if __name__ == "__main__":
    req = urllib.request.Request("https://alx-intranet.hbtn.io/status")
    with urllib.request.urlopen(req) as resp:
        result = resp.read()
result
print(result)
utfcontent = result.decode(utf-8)
utfcontent = result.decode('UTF-8')
utfcontent
type(result)
from fabric import Connection
result = Connection('web1.example.com').run('uname -s', hide=True)
msg = "Ran {0.command!r} on {0.connection.host}, got stdout:\n{0.stdout}"
from fabric import *
result = Connection('web1.example.com').run('uname -s', hide=True)
